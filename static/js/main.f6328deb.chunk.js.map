{"version":3,"sources":["ShortListedData/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ShortList","props","useState","percent","setPercent","value","setValue","setFlag","trades","setTrades","id","for","type","list","onChange","e","temp","target","val","Math","ceil","length","map","item","key","data","get","clientList","Map","i","has","set","push","console","log","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAIe,SAASA,EAAUC,GAE9B,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,oBAAS,GAAjC,mBAAaK,GAAb,WACA,EAA4BL,mBAAS,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KAoBA,OACI,gCACI,sBAAKC,GAAG,YAAR,UACI,gCACI,uBAAOC,IAAI,OAAX,oCACA,uBAAOD,GAAG,OAAOE,KAAK,OAAOC,KAAK,OAAOC,SAnBzD,SAAmBC,GACf,IAAMC,EAAOD,EAAEE,OAAOZ,MAChBa,EAAMC,KAAKC,KAAOnB,EAAMoB,OAAUL,EAAQ,KAChDZ,EAAWY,GACXP,EAAUS,MAgBE,0BAAUR,GAAG,OAAb,SAvBG,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAwBnBY,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAkBnB,MAAOkB,GAAZC,WAMzB,gCACI,uBAAOb,IAAI,OAAX,qCACA,uBAAOD,GAAG,OAAOE,KAAK,OAAOC,KAAK,SAASC,SAtB3D,SAAmBC,GACfT,EAASL,EAAMwB,KAAKC,IAAIX,EAAEE,OAAOZ,QACjCE,GAAQ,MAqBI,0BAAUG,GAAG,SAAb,SACKT,EAAM0B,WAAWL,KAAI,SAACC,GAAD,OAClB,wBAAQlB,MAAOkB,eAK/B,sBAAKb,GAAG,YAAR,UACI,kCACI,gCACI,6BACI,iEAAoCP,EAApC,yBAGR,gCACKF,EAAM0B,WAAWL,KAAI,SAACC,GACnB,OAAO,6BAAI,oBAAIb,GAAG,KAAP,SAAaT,EAAMwB,KAAKC,IAAIH,IAASf,EAASe,EAAO,iBAM5E,qDAAwBlB,EAAxB,kBAA8CJ,EAAMoB,gBCdpE,IAnDA,IAAMR,EAAO,CAAC,UAEZ,UAEA,OAEA,UAGA,OAEA,OAEA,MAEA,UAEA,OAEA,UAEA,UAEA,OAEA,UAEA,OAEA,OAEA,UAEA,OAEA,UAEA,OAEA,UAEA,OAEA,aAEA,aAGIc,EAAW,GAEXF,EAAO,IAAIG,IACRC,EAAI,EAAGA,EAAIhB,EAAKQ,OAAQQ,IAC3BJ,EAAKK,IAAIjB,EAAKgB,IAChBJ,EAAKM,IAAIlB,EAAKgB,GAAIJ,EAAKC,IAAIb,EAAKgB,IAAM,IAGtCJ,EAAKM,IAAIlB,EAAKgB,GAAI,GAClBF,EAAWK,KAAKnB,EAAKgB,KAIzB,IAAMR,EAAOR,EAAKQ,OAElBY,QAAQC,IAAI,aAAcP,GAYXQ,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,4BAAG,4BAAG,oBAAI1B,GAAG,SAAP,+BACN,cAACV,EAAD,CAAWyB,KAAMA,EAAME,WAAYA,EAAYN,OAAQA,QC7D9CgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6328deb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./style.css\";\r\n\r\nexport default function ShortList(props) {\r\n\r\n    const [percent, setPercent] = useState(0)\r\n    const [value, setValue] = useState(0);\r\n    const [flag, setFlag] = useState(false)\r\n    const [trades, setTrades] = useState(0);\r\n\r\n\r\n    const percentage = [5, 10, 15, 20, 25, 30, 35, 40, 45]\r\n\r\n    let p = 100;\r\n    function inputData(e) {\r\n        const temp = e.target.value;\r\n        const val = Math.ceil(((props.length) * temp) / 100)\r\n        setPercent(temp)\r\n        setTrades(val)\r\n\r\n    }\r\n\r\n    function inputName(e) {\r\n        setValue(props.data.get(e.target.value));\r\n        setFlag(true);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"container\">\r\n                <div>\r\n                    <label for=\"list\">select the % of trade </label>\r\n                    <input id=\"list\" type=\"text\" list=\"data\" onChange={inputData} />\r\n                    <datalist id=\"data\">\r\n                        {percentage.map((item, key) =>\r\n                            <option key={key} value={item} />\r\n                        )}\r\n                    </datalist>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <label for=\"list\">select the Client name </label>\r\n                    <input id=\"list\" type=\"text\" list=\"client\" onChange={inputName} />\r\n                    <datalist id=\"client\">\r\n                        {props.clientList.map((item) =>\r\n                            <option value={item} />\r\n                        )}\r\n                    </datalist>\r\n                </div>\r\n            </div>\r\n            <div id=\"container\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Clints who have done more than {percent}% of the trades</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.clientList.map((item) => {\r\n                            return <tr><td id=\"td\">{props.data.get(item) >= trades ? item : null}</td></tr>\r\n                        })}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n                <p>Selected Client had {value} trader out of {props.length}</p>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport ShortList from './ShortListedData';\n\nconst list = [\"Bigcorp\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Acme\"\n  ,\n  \"Bigcorp\"\n  ,\n\n  \"Zork\"\n  ,\n  \"Zork\"\n  ,\n  \"Abc\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Acme\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Zork\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Zork\"\n  ,\n  \"Zork\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Acme\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Acme\"\n  ,\n  \"Bigcorp\"\n  ,\n  \"Acme\"\n  ,\n  \"Littlecorp\"\n  ,\n  \"Nadircorp\"\n]\n\nconst clientList=[];\n\nconst data = new Map();\nfor (let i = 0; i < list.length; i++) {\n  if (data.has(list[i])) {\n    data.set(list[i], data.get(list[i]) + 1);\n\n  } else {\n    data.set(list[i], 1);\n    clientList.push(list[i])\n  }\n\n}\nconst length=list.length;\n\nconsole.log(\"clientList\", clientList)\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p><b><h1 id=\"header\">Kuant Project</h1></b></p>\n      <ShortList data={data} clientList={clientList} length={length} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}